---
import { heroSectionData } from "@/data/heroSectionData"; 
import GetReviewSectionHeader from "./GetReviewSectionHeader.astro";
import { Image } from "astro:assets";
import MobileHeroImage from "@/assets/images/mob-hero.webp";
---

<section class="flex lg:flex-row flex-col mt-0 gap-4 lg:gap-0 md:mt-[70px]">
  <div class="lg:hidden">
    <Image src={MobileHeroImage} alt="hero-section" />
  </div>
  <div class="flex-1">
    <div
      class="pl-4 xl:ml-auto text-white w-full pb-4 pr-4 lg:pr-0 lg:max-w-[582px] mr-0 lg:mr-[36px]"
    >
      <h1
        class="text-4xl md:text-5xl bg-text-gradient bg-clip-text font-normal font-Frank text-transparent leading-[42px] md:leading-[64px]"
      >
        {heroSectionData.heading}
      </h1>
      <p
        class="text-base md:text-xl !leading-[34px] font-medium text-secondary max-w-[498px]"
      >
        {heroSectionData.description}
      </p>
      <p
        class="text-primary text-base md:text-xl font-medium leading-[34px] md:mt-1"
      >
        {heroSectionData.subheading}
      </p>

      <div class="flex flex-col sm:flex-row mt-7 gap-[10px]">
        <div>
          
            <div id="verifyBtn"
              class="group shadow-btn-custom text-center cursor-pointer py-4 sm:py-[2px] rounded-full px-6 lg:min-w-[222px] w-full bg-transparent hover:bg-primary hover:text-white hover:border-primary transition-colors border-2 border-[#DC5E3D] leading-6"
            >
              <p
                class="group-hover:bg-none group-hover:text-white text-sm md:text-lg bg-text-gradient bg-clip-text text-transparent font-medium md:font-semibold"
              >
                {heroSectionData.insuranceBtnText}
              </p>
              <span
                class="group-hover:bg-none group-hover:text-white text-sm md:text-lg bg-text-gradient bg-clip-text text-transparent"
                >{heroSectionData.insuranceBtnDes}</span
              >
            </div>
          
        </div>

        <div>
          <a href={`tel:${heroSectionData.contactNumber}`}>
            <div
              class="relative flex py-5 justify-center sm:justify-start sm:py-1 md:py-3 px-3 md:px-6 rounded-full bg-btn-gradient text-white overflow-hidden transition-all duration-300 ease-in-out items-center gap-1 md:gap-3 group"
            >
              <div
                class="absolute inset-0 bg-primary scale-x-0 group-hover:scale-x-100 origin-left transition-transform duration-300 ease-in-out"
              >
              </div>

              <div class="relative flex items-center gap-1 md:gap-3 z-10">
                <svg
                  width="23"
                  height="21"
                  viewBox="0 0 23 21"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  class="transition-transform duration-300 ease-in-out group-hover:scale-110"
                >
                  <path
                    d="M6.8786 1.55176C7.43615 1.55176 9.66637 6.166 9.66637 6.67869C9.66637 7.70408 7.9937 8.72946 7.43615 9.75485C6.8786 10.7802 7.9937 11.8056 9.10881 12.831C9.5437 13.2309 11.339 14.8818 12.4541 14.3691C13.5692 13.8564 14.6844 12.3183 15.7995 12.3183C16.357 12.3183 21.375 14.3691 21.375 14.8818C21.375 16.9326 19.7023 18.4706 18.0297 18.9833C16.357 19.496 15.2419 19.496 13.0117 18.9833C10.7815 18.4706 9.10881 17.9579 6.32104 15.3945C3.53327 12.831 2.97572 11.2929 2.41817 9.24216C1.86061 7.19138 1.86061 6.166 2.41817 4.62792C2.97572 3.08984 4.64838 1.55176 6.8786 1.55176Z"
                    stroke="currentColor"
                    stroke-width="2.23022"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                  <path
                    d="M13.5692 5.69421C14.3052 6.01208 14.9743 6.44275 15.5318 6.96569C16.0782 7.46813 16.5354 8.07311 16.87 8.72936"
                    stroke="currentColor"
                    stroke-width="2.23022"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                  <path
                    d="M14.6843 1.80798C16.2566 2.18738 17.6617 2.93591 18.7768 3.9613C19.8807 4.98668 20.6948 6.26842 21.0962 7.70396"
                    stroke="currentColor"
                    stroke-width="2.23022"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>

                <div class="transition-all duration-300 ease-in-out">
                  <p class="text-base md:text-sm font-bold">{heroSectionData.helpText}</p>
                  <p
                    class="text-sm md:text-xs font-medium md:font-semibold leading-6"
                  >
                    {heroSectionData.contactNumber}
                  </p>
                </div>
              </div>
            </div>
          </a>
        </div>
      </div>

      <p
        class="font-medium my-5 text-text text-center lg:text-left text-sm lg:text-base"
      >
        {heroSectionData.reviewheading}
      </p>
      <GetReviewSectionHeader />
    </div>
  </div>
  <div class="flex-1 hero-section bg-right bg-contain bg-no-repeat"></div>
  
   
  
  <div id="popupOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden items-center justify-center">
  
    <div class="bg-white rounded-lg p-8 max-w-sm mx-auto z-50 relative">
      <button id="closePopup" class="absolute top-2 right-2 text-gray-600 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
  

      <section class="max-w-sm mx-auto bg-white rounded-lg">
       
        <p class="text-center font-semibold text-black mt-4 text-primary">
         Provide your contact details

        </p>
        <form id="coverageForm" class="mt-4 space-y-3">
          <div>
            <input
              type="text"
              id="fullName"
              name="fullName"
              placeholder=" Name"
              class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p id="fullNameError" class="text-red-500 text-sm hidden"></p>
          </div>

          <div>
  <input
    type="email"
    id="email"
    name="email"
    placeholder="Email"
    class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
  />
  <p id="emailError" class="text-red-500 text-sm hidden"></p>
</div>
          
          <div>
            <input
              type="tel"
              id="telephone"
              name="telephone"
              placeholder="contact Number"
              maxlength="10"
              class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p id="telephoneError" class="text-red-500 text-sm hidden"></p>
          </div>


          <button
            type="submit"
            class="w-full bg-primary text-white py-2 rounded-md transition "
          >
          save
          </button>
        </form>
      </section>
    </div>
  </div>
</section>

<style>
  .hero-section {
    background-image: url("../../../assets/images/banner.svg");
  }
</style>

<script>
  import * as Yup from "yup";
  
  document.addEventListener('DOMContentLoaded', () => {
    const verifyBtn = document.getElementById('verifyBtn');
    const popupOverlay = document.getElementById('popupOverlay');
    const closePopup = document.getElementById('closePopup');
    const coverageForm = document.getElementById('coverageForm');

    const contactNumber = "{heroSectionData.contactNumber}"; // Your contact number

    const validationSchema = {
      fullName: {
        required: "Full name is required",
        validate: (value) => !!value || "Full name is required"
      },
      telephone: {
        required: "Telephone is required",
        validate: (value) => {
          if (!value) return "Telephone is required";
          if (!/^\d{10}$/.test(value)) return "Telephone must be 10 digits";
          return true;
        }
      },
      email: {
        required: "Email is required",
        validate: (value) => {
          const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
          if (!value) return "Email is required";
          if (!emailRegex.test(value)) return "Invalid email address";
          return true;
        }
      },
      insuranceType: {
        required: "Insurance type is required",
        validate: (value) => !!value || "Insurance type is required"
      }
    };

    function showError(fieldName, message) {
      const errorElement = document.getElementById(`${fieldName}Error`);
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }

    function clearError(fieldName) {
      const errorElement = document.getElementById(`${fieldName}Error`);
      if (errorElement) {
        errorElement.textContent = '';
        errorElement.classList.add('hidden');
      }
    }

    function validateField(fieldName, value) {
      const field = validationSchema[fieldName];
      if (!field) return true;

      if (field.required && !value) {
        showError(fieldName, field.required);
        return false;
      }

      if (field.validate) {
        const result = field.validate(value);
        if (result !== true) {
          showError(fieldName, result);
          return false;
        }
      }

      clearError(fieldName);
      return true;
    }

    function validateForm() {
      const fullName = document.getElementById('fullName').value;
      const telephone = document.getElementById('telephone').value;
      const insuranceType = document.getElementById('insuranceType')?.value || '';

      const isFullNameValid = validateField('fullName', fullName);
      const isTelephoneValid = validateField('telephone', telephone);
      const isInsuranceTypeValid = validateField('insuranceType', insuranceType);

      return isFullNameValid && isTelephoneValid && isInsuranceTypeValid;
    }

    if (coverageForm) {
      const fields = ['fullName', 'telephone', 'insuranceType'];
      fields.forEach(fieldName => {
        const field = document.getElementById(fieldName);
        if (field) {
          field.addEventListener('blur', () => validateField(fieldName, field.value));
          field.addEventListener('input', () => {
            if (field.dataset.touched) {
              validateField(fieldName, field.value);
            }
          });
          field.addEventListener('focus', () => {
            field.dataset.touched = 'true';
          });
        }
      });

      coverageForm.addEventListener('submit', (e) => {
        e.preventDefault();

        if (validateForm()) {
          const formData = {
            fullName: document.getElementById('fullName').value,
            telephone: document.getElementById('telephone').value,
            insuranceType: document.getElementById('insuranceType')?.value || ''
          };

          console.log('Form submitted:', formData);
          alert('Your coverage check request has been submitted!');
        }
      });
    }

    if (verifyBtn && popupOverlay && closePopup) {
      verifyBtn.addEventListener('click', (e) => {
        e.preventDefault();

        if (window.innerWidth <= 768) {
          // On mobile: Open phone dialer instead of popup
          window.location.href = `tel:${contactNumber}`;
        } else {
          // On desktop: Open popup
          popupOverlay.classList.remove('hidden');
          popupOverlay.classList.add('flex');
        }
      });

      closePopup.addEventListener('click', () => {
        popupOverlay.classList.remove('flex');
        popupOverlay.classList.add('hidden');
      });

      popupOverlay.addEventListener('click', (e) => {
        if (e.target === popupOverlay) {
          popupOverlay.classList.remove('flex');
          popupOverlay.classList.add('hidden');
        }
      });
    }
  });
</script>
